---
import SpotTable from './SpotTable.astro';

const { spots } = Astro.props;

if (!spots) {
    throw new Error('`spots` が SpotTableClient に渡されていません。');
}

const regions = [...new Set(spots.map(s => s.region).filter(Boolean))].sort();

const prefectures = [
    '北海道', '青森県', '岩手県', '宮城県', '秋田県', '山形県', '福島県',
    '茨城県', '栃木県', '群馬県', '埼玉県', '千葉県', '東京都', '神奈川県',
    '新潟県', '富山県', '石川県', '福井県', '山梨県', '長野県',
    '岐阜県', '静岡県', '愛知県', '三重県',
    '滋賀県', '京都府', '大阪府', '兵庫県', '奈良県', '和歌山県',
    '鳥取県', '島根県', '岡山県', '広島県', '山口県',
    '徳島県', '香川県', '愛媛県', '高知県',
    '福岡県', '佐賀県', '長崎県', '熊本県', '大分県', '宮崎県', '鹿児島県',
    '沖縄県'
];

const trailing = ['未発見', '検証中'];

const allRegions = [...new Set(spots.map(s => s.region).filter(Boolean))];

const sortedRegions = [
    ...prefectures.filter(p => allRegions.includes(p)),
    ...allRegions.filter(r => !prefectures.includes(r) && !trailing.includes(r)).sort(),
    ...trailing.filter(r => allRegions.includes(r))
];
---

<div class="mb-4 grid md:grid-cols-[1fr_2fr] gap-2 md:gap-8">
    <div class="grid grid-cols-[3rem_1fr] items-center">
        <label for="regionFilter" class="text-sm font-semibold">地域：</label>
        <select id="regionFilter" class="border w-full px-2 py-1 text-sm">
            <option value="">すべての地域</option>
            {sortedRegions.map(region => (
                    <option value={region}>{region}</option>
            ))}
        </select>
    </div>

    <div class="grid grid-cols-[6rem_1fr] items-center">
        <label for="keywordFilter" class="text-sm font-semibold">キーワード：</label>
        <input
                type="text"
                id="keywordFilter"
                placeholder="場所名や所在地など"
                class="border px-2 py-1 w-full text-sm"
        />
    </div>
</div>

<!-- テーブル表示部 -->
<div id="tableWrapper" class="invisible">
    <SpotTable {spots} />
</div>

<script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
        const regionFilter = document.getElementById('regionFilter');
        const keywordFilter = document.getElementById('keywordFilter');
        const rows = document.querySelectorAll('#spotTableBody tr');
        const wrapper = document.getElementById('tableWrapper');

        // URL パラメータ取得
        const params = new URLSearchParams(location.search);
        const initialRegion = params.get('region') || '';
        const initialKeyword = params.get('keyword') || '';

        // 初期値反映（※フィルター前に）
        regionFilter.value = initialRegion;
        keywordFilter.value = initialKeyword;

        const updateURL = () => {
            const region = regionFilter.value.trim();
            const keyword = keywordFilter.value.trim();
            const newParams = new URLSearchParams();

            if (region) newParams.set('region', region);
            if (keyword) newParams.set('keyword', keyword);

            const newURL = `${location.pathname}${newParams.toString() ? '?' + newParams.toString() : ''}`;
            history.replaceState(null, '', newURL);
        };

        const filterRows = () => {
            const selectedRegion = regionFilter.value.trim();
            const keyword = keywordFilter.value.trim().toLowerCase();

            rows.forEach(row => {
                const region = row.querySelector('td:nth-child(2)')?.textContent?.trim() || '';
                const place = row.querySelector('td:nth-child(4)')?.textContent?.toLowerCase() || '';

                const matchRegion = !selectedRegion || region === selectedRegion;
                const matchKeyword = !keyword || region.toLowerCase().includes(keyword) || place.includes(keyword);

                row.style.display = matchRegion && matchKeyword ? '' : 'none';
            });

            if (wrapper) wrapper.classList.remove('invisible');
        };

        regionFilter.addEventListener('change', () => {
            updateURL();
            filterRows();
        });

        keywordFilter.addEventListener('input', () => {
            updateURL();
            filterRows();
        });

        filterRows(); // 初回適用
    });
</script>
